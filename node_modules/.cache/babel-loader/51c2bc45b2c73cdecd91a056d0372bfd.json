{"ast":null,"code":"var _jsxFileName = \"/Users/geromemandapat/Documents/Personal Files/React Projects/weather-cast/src/App.js\",\n    _s = $RefreshSig$();\n\n//Import Components\nimport { useEffect, useState } from 'react';\nimport { useTransition, animated } from 'react-spring';\nimport axios from 'axios';\nimport TopBar from './TopBar';\nimport SearchBar from './SearchBar';\nimport WeatherCard from './WeatherCard';\nimport Loader from './Loader';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimatedWeatherCard = animated(WeatherCard);\n_c = AnimatedWeatherCard;\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nfunction App() {\n  _s();\n\n  const [searchItem, setSearchItem] = useState(\"\");\n  const [tempUnit, setTempUnit] = useState(\"metric\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [resultsVisibility, setResultsVisibility] = useState(false);\n  const [isWeatherCardLoading, setWeatherCardLoading] = useState(true);\n  const [weatherCoordinates, setWeatherCoordinates] = useState({\n    lat: 14.6042,\n    lon: 120.9822,\n    loc: \"Manila, PH\"\n  });\n  const [weatherData, setWeatherData] = useState(null);\n  const urlGeo = `http://api.openweathermap.org/geo/1.0/direct?q=${searchItem}&limit=5&appid=${apiKey}`;\n  const urlWeather = `https://api.openweathermap.org/data/2.5/onecall?lat=${weatherCoordinates.lat}&lon=${weatherCoordinates.lon}&units=${tempUnit}&appid=${apiKey}`;\n  const transition = useTransition(isWeatherCardLoading, {\n    from: {\n      transform: \"translateY(1200px)\"\n    },\n    enter: {\n      transform: \"translateY(0px)\"\n    },\n    leave: {\n      transform: \"translateY(1200px)\"\n    }\n  });\n  useEffect(() => {\n    setResultsVisibility(false);\n\n    if (searchItem) {\n      axios.get(urlGeo).then(response => {\n        if (response.data.length > 0) {\n          setSearchResults(response.data);\n          setResultsVisibility(true);\n        }\n      }).catch(error => {\n        throw new Error(error.message);\n      });\n    }\n  }, [searchItem, urlGeo]);\n  useEffect(() => {\n    document.getElementById(\"search_input\").value = \"\";\n    setSearchItem(\"\");\n    setWeatherCardLoading(true);\n    axios.get(urlWeather).then(response => {\n      if (response) {\n        setWeatherData(response.data);\n        setWeatherCardLoading(false);\n      }\n    }).catch(error => {\n      throw new Error(error.message);\n    });\n  }, [weatherCoordinates, tempUnit, urlWeather]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        setSearchItem: setSearchItem,\n        searchResults: searchResults,\n        setWeatherCoordinates: setWeatherCoordinates,\n        resultsVisibility: resultsVisibility,\n        tempUnit: tempUnit,\n        setTempUnit: setTempUnit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), transition((style, item) => !item && /*#__PURE__*/_jsxDEV(AnimatedWeatherCard, {\n        location: weatherCoordinates.loc,\n        weatherData: weatherData,\n        tempUnit: tempUnit,\n        setTempUnit: setTempUnit,\n        style: style\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Oml6yLG89hwZmkj6xtliPnX10gM=\", false, function () {\n  return [useTransition];\n});\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AnimatedWeatherCard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/geromemandapat/Documents/Personal Files/React Projects/weather-cast/src/App.js"],"names":["useEffect","useState","useTransition","animated","axios","TopBar","SearchBar","WeatherCard","Loader","AnimatedWeatherCard","apiKey","process","env","REACT_APP_API_KEY","App","searchItem","setSearchItem","tempUnit","setTempUnit","searchResults","setSearchResults","resultsVisibility","setResultsVisibility","isWeatherCardLoading","setWeatherCardLoading","weatherCoordinates","setWeatherCoordinates","lat","lon","loc","weatherData","setWeatherData","urlGeo","urlWeather","transition","from","transform","enter","leave","get","then","response","data","length","catch","error","Error","message","document","getElementById","value","style","item"],"mappings":"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","sourcesContent":["//Import Components\nimport { useEffect, useState } from 'react';\nimport { useTransition, animated } from 'react-spring';\nimport axios from 'axios';\nimport TopBar from './TopBar';\nimport SearchBar from './SearchBar';\nimport WeatherCard from './WeatherCard';\nimport Loader from './Loader';\n\nimport './App.css';\n\nconst AnimatedWeatherCard = animated(WeatherCard);\n\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nfunction App() {\n\n  const [searchItem, setSearchItem] = useState(\"\");\n  const [tempUnit, setTempUnit] = useState(\"metric\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [resultsVisibility, setResultsVisibility] = useState(false);\n  const [isWeatherCardLoading, setWeatherCardLoading] = useState(true);\n  const [weatherCoordinates, setWeatherCoordinates] = useState({lat: 14.6042, lon: 120.9822, loc: \"Manila, PH\"});\n  const [weatherData, setWeatherData] = useState(null);\n\n  const urlGeo = `http://api.openweathermap.org/geo/1.0/direct?q=${searchItem}&limit=5&appid=${apiKey}`;\n  const urlWeather = `https://api.openweathermap.org/data/2.5/onecall?lat=${weatherCoordinates.lat}&lon=${weatherCoordinates.lon}&units=${tempUnit}&appid=${apiKey}`;\n\n  const transition = useTransition(isWeatherCardLoading, {\n    from: {transform: \"translateY(1200px)\"},\n    enter: {transform: \"translateY(0px)\"},\n    leave: {transform: \"translateY(1200px)\"}\n  })\n\n  useEffect(() => {\n    setResultsVisibility(false);\n    if (searchItem){\n      axios.get(urlGeo)\n        .then(response => {\n          if (response.data.length > 0){\n            setSearchResults(response.data);\n            setResultsVisibility(true);\n          }\n        })\n        .catch(error => {\n          throw new Error(error.message);\n        });\n    }\n  }, [searchItem, urlGeo]);\n\n  useEffect(() => {\n    document.getElementById(\"search_input\").value = \"\";\n    setSearchItem(\"\");\n    setWeatherCardLoading(true);\n    axios.get(urlWeather)\n      .then(response => {\n        if (response){\n          setWeatherData(response.data);\n          setWeatherCardLoading(false);\n        }\n      })\n      .catch(error => {\n        throw new Error(error.message);\n      })\n  }, [weatherCoordinates, tempUnit, urlWeather]);\n\n  return (\n    <div className=\"App\">\n      <TopBar />\n      <main>\n        <SearchBar \n          setSearchItem ={setSearchItem} \n          searchResults={searchResults}\n          setWeatherCoordinates={setWeatherCoordinates} \n          resultsVisibility={resultsVisibility}\n          tempUnit={tempUnit}\n          setTempUnit={setTempUnit}\n        />\n        {transition((style, item) => (\n          !item &&\n          <AnimatedWeatherCard \n            location={weatherCoordinates.loc}\n            weatherData={weatherData}\n            tempUnit={tempUnit}\n            setTempUnit={setTempUnit}\n            style={style}\n          />\n        ))}\n      </main>\n    </div>\n  );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}