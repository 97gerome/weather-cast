{"ast":null,"code":"var _jsxFileName = \"/Users/geromemandapat/Documents/Personal Files/React Projects/weather-cast/src/WeatherCard.js\",\n    _s = $RefreshSig$();\n\nimport { useTransition, animated } from 'react-spring';\nimport Loader from './Loader';\nimport convertDateToObject from './modules/convertDateToObject';\nimport './WeatherCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WeatherCard = props => {\n  _s();\n\n  const {\n    location,\n    isWeatherCardLoading,\n    weatherData,\n    tempUnit\n  } = props;\n  const {\n    timezone_offset: timezoneOffset\n  } = weatherData || \"\";\n  const {\n    dt: currentDt,\n    temp: currentTemp,\n    weather: currentWeather\n  } = weatherData.current || {\n    dt: \"\",\n    temp: 0,\n    weather: [{\n      description: \"\",\n      icon: \"01d\"\n    }]\n  };\n  const {\n    day: currentDay,\n    date: currentDate,\n    month: currentMonth\n  } = convertDateToObject(currentDt, timezoneOffset);\n  const [{\n    description: currentWeatherDesc,\n    icon\n  }] = currentWeather;\n  const {\n    hourly: dayHourlyData\n  } = weatherData || {\n    hourly: []\n  };\n  const {\n    daily: weekDailyData\n  } = weatherData || {\n    daily: []\n  };\n  const loaderFade = useTransition(isWeatherCardLoading, {\n    from: {\n      opacity: 0\n    },\n    enter: {\n      opacity: 1\n    },\n    leave: {\n      opacity: 0\n    },\n    config: {\n      duration: 100\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-card\",\n    children: loaderFade((style, item) => item ? /*#__PURE__*/_jsxDEV(animated.div, {\n      style: style,\n      className: \"loader-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location\",\n        children: location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-weather-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-date\",\n          children: [currentDay, \", \", currentDate, \"/\", currentMonth]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-temp\",\n          children: [currentTemp.toFixed(), \"\\xB0\", tempUnit === \"metric\" ? \"C\" : \"F\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-weather-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://openweathermap.org/img/wn/${icon}@2x.png`,\n            alt: \"current-weather-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this), currentWeatherDesc.charAt(0).toUpperCase() + currentWeatherDesc.slice(1)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hourly-weather-wrapper\",\n        children: dayHourlyData.slice(0, 24).map((hourlyData, index) => {\n          const {\n            hour: hourlyTime,\n            date: hourlyDate,\n            month: hourlyMonth\n          } = convertDateToObject(hourlyData.dt, timezoneOffset);\n          const [{\n            icon: hourlyWeatherIcon\n          }] = hourlyData.weather;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hourly-weather-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hourly-weather-time\",\n              children: hourlyTime + \":00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hourly-weather-date\",\n              children: [hourlyDate, \"/\", hourlyMonth]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hourly-weather-details\",\n              children: [hourlyData.temp.toFixed(0), \"\\xB0\", /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `http://openweathermap.org/img/wn/${hourlyWeatherIcon}@2x.png`,\n                alt: `hourly-weather-icon-${index}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"7-Day Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"daily-weather-wrapper\",\n        children: weekDailyData.slice(1).map((dailyData, index) => {\n          const {\n            day: dailyDay,\n            date: dailyDate,\n            month: dailyMonth\n          } = convertDateToObject(dailyData.dt, timezoneOffset);\n          const {\n            min: dailyMinTemp,\n            max: dailyMaxTemp\n          } = dailyData.temp;\n          const [{\n            description: dailyWeatherDesc,\n            icon: dailyWeatherIcon\n          }] = dailyData.weather;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"daily-weather-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"daily-weather-date\",\n              children: [dailyDay, \", \", dailyDate, \"/\", dailyMonth]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"daily-weather-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"daily-temp-details\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"H: \", dailyMaxTemp.toFixed(0), \"\\xB0\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"L: \", dailyMinTemp.toFixed(0), \"\\xB0\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `http://openweathermap.org/img/wn/${dailyWeatherIcon}@2x.png`,\n                alt: `daily-weather-icon-${index}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"daily-weather-desc\",\n                children: dailyWeatherDesc.charAt(0).toUpperCase() + dailyWeatherDesc.slice(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WeatherCard, \"qEC8OnIydzYaSuY0Z9qC4PHUx20=\", false, function () {\n  return [useTransition];\n});\n\n_c = WeatherCard;\nWeatherCard.defaultProps = {};\nexport default WeatherCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherCard\");","map":{"version":3,"sources":["/Users/geromemandapat/Documents/Personal Files/React Projects/weather-cast/src/WeatherCard.js"],"names":["useTransition","animated","Loader","convertDateToObject","WeatherCard","props","location","isWeatherCardLoading","weatherData","tempUnit","timezone_offset","timezoneOffset","dt","currentDt","temp","currentTemp","weather","currentWeather","current","description","icon","day","currentDay","date","currentDate","month","currentMonth","currentWeatherDesc","hourly","dayHourlyData","daily","weekDailyData","loaderFade","from","opacity","enter","leave","config","duration","style","item","toFixed","charAt","toUpperCase","slice","map","hourlyData","index","hour","hourlyTime","hourlyDate","hourlyMonth","hourlyWeatherIcon","dailyData","dailyDay","dailyDate","dailyMonth","min","dailyMinTemp","max","dailyMaxTemp","dailyWeatherDesc","dailyWeatherIcon","defaultProps"],"mappings":"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","sourcesContent":["import { useTransition, animated } from 'react-spring';\nimport Loader from './Loader';\n\nimport convertDateToObject from './modules/convertDateToObject';\n\nimport './WeatherCard.css';\n\nconst WeatherCard = (props) => {\n\n    const {location,isWeatherCardLoading, weatherData, tempUnit} = props;\n    const {timezone_offset: timezoneOffset} = weatherData || \"\";   \n    const {\n        dt: currentDt, \n        temp: currentTemp, \n        weather: currentWeather\n    } = weatherData.current || \n    {\n        dt: \"\", \n        temp: 0, \n        weather: [{description: \"\", icon: \"01d\"}]\n    };\n    const {day: currentDay, date: currentDate, month: currentMonth} = convertDateToObject(currentDt, timezoneOffset);\n    const [{description: currentWeatherDesc, icon}] = currentWeather;\n    const {hourly: dayHourlyData} = weatherData || {hourly: []};\n    const {daily: weekDailyData} = weatherData || {daily: []};\n\n    const loaderFade = useTransition(isWeatherCardLoading, {\n        from: { opacity: 0 },\n        enter: { opacity: 1 },\n        leave: { opacity: 0 },\n        config: { duration: 100 }\n    })\n\n    return (\n        <div className=\"weather-card\">\n            {loaderFade((style, item) =>\n                item ?\n                <animated.div style={style} className=\"loader-wrapper\">\n                    <Loader/>\n                </animated.div>\n                : <>\n                    <div className=\"location\">{location}</div>\n                    <div className=\"current-weather-container\">\n                        <div className=\"current-date\">{currentDay}, {currentDate}/{currentMonth}</div>\n                        <div className=\"current-temp\">{currentTemp.toFixed()}°{tempUnit === \"metric\"? \"C\" : \"F\"}</div>\n                        <div className=\"current-weather-details\">\n                            <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"current-weather-icon\"/>\n                            {currentWeatherDesc.charAt(0).toUpperCase() + currentWeatherDesc.slice(1)}\n                        </div>\n                    </div>\n                    <div className=\"hourly-weather-wrapper\">\n                        {dayHourlyData.slice(0, 24).map((hourlyData, index) => {\n                            const {hour: hourlyTime, date: hourlyDate, month: hourlyMonth} = convertDateToObject(hourlyData.dt, timezoneOffset);\n                            const [{icon: hourlyWeatherIcon}] = hourlyData.weather;\n                            return (\n                                <div className=\"hourly-weather-container\" key={index}>\n                                    <div className=\"hourly-weather-time\">\n                                        {hourlyTime + \":00\"}\n                                    </div>\n                                    <div className=\"hourly-weather-date\">\n                                        {hourlyDate}/{hourlyMonth}\n                                    </div>\n                                    <div className=\"hourly-weather-details\">\n                                        {hourlyData.temp.toFixed(0)}°\n                                        <img src={`http://openweathermap.org/img/wn/${hourlyWeatherIcon}@2x.png`} alt={`hourly-weather-icon-${index}`}/>\n                                    </div>\n                                </div>\n                            );   \n                        })}\n                    </div>\n                    <h4>7-Day Forecast</h4>\n                    <div className=\"daily-weather-wrapper\">\n                        {weekDailyData.slice(1).map((dailyData, index) => {\n                            const {day: dailyDay, date: dailyDate, month: dailyMonth} = convertDateToObject(dailyData.dt, timezoneOffset);\n                            const {min: dailyMinTemp, max: dailyMaxTemp} = dailyData.temp;\n                            const [{description: dailyWeatherDesc, icon: dailyWeatherIcon}] = dailyData.weather;\n                            return(\n                                <div className=\"daily-weather-container\" key={index}>\n                                    <div className=\"daily-weather-date\">\n                                        {dailyDay}, {dailyDate}/{dailyMonth}\n                                    </div>\n                                    <div className=\"daily-weather-details\">\n                                        <span className=\"daily-temp-details\">\n                                            <span>\n                                                H: {dailyMaxTemp.toFixed(0)}°\n                                            </span>\n                                            <span>\n                                                L: {dailyMinTemp.toFixed(0)}°\n                                            </span>\n                                        </span>\n                                        <img src={`http://openweathermap.org/img/wn/${dailyWeatherIcon}@2x.png`} alt={`daily-weather-icon-${index}`}/>\n                                        <span className=\"daily-weather-desc\">\n                                            {dailyWeatherDesc.charAt(0).toUpperCase() + dailyWeatherDesc.slice(1)}\n                                        </span>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n\nWeatherCard.defaultProps = {\n\n};\n\nexport default WeatherCard;\n"]},"metadata":{},"sourceType":"module"}